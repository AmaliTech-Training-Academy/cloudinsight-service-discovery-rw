name: Quality Tests Module

on:
  workflow_call:
    inputs:
      java_version:
        description: "Java version to use"
        required: false
        type: string
        default: "21"
      maven_version:
        description: "Maven version to use"
        required: false
        type: string
        default: "3.9.6"
      coverage_threshold:
        description: "Coverage threshold percentage"
        required: false
        type: number
        default: 80
      run_integration_tests:
        description: "Run integration tests"
        required: false
        type: boolean
        default: false
    outputs:
      test_results:
        description: "Test execution results"
        value: ${{ jobs.quality-tests.outputs.test_results }}
      coverage_percentage:
        description: "Code coverage percentage"
        value: ${{ jobs.quality-tests.outputs.coverage_percentage }}
      quality_status:
        description: "Code quality check status"
        value: ${{ jobs.quality-tests.outputs.quality_status }}

permissions:
  contents: read
  checks: write
  actions: read

jobs:
  quality-tests:
    name: Quality Tests & Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      test_results: ${{ steps.test-summary.outputs.test_results }}
      coverage_percentage: ${{ steps.coverage.outputs.percentage }}
      quality_status: ${{ steps.quality-check.outputs.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Validate Maven project
        run: |
          echo "🔍 Validating Maven project structure..."
          if [ -f pom.xml ]; then
            echo "✅ Found pom.xml"
            mvn validate
          else
            echo "❌ No pom.xml found"
            exit 1
          fi

      - name: Compile project
        run: |
          echo "🔨 Compiling Spring Boot microservice..."
          mvn clean compile
          echo "✅ Compilation successful"

      - name: Code quality analysis with Checkstyle
        id: quality-check
        run: |
          echo "🔍 Running code quality checks with Checkstyle..."
          if mvn checkstyle:check 2>/dev/null; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "✅ Code quality checks passed"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Code quality issues found"
            echo "💡 Run 'mvn checkstyle:check' locally to see detailed issues"
            # Don't fail the workflow, just report
          fi

      - name: Skip unit tests for service discovery
        run: |
          echo "🚫 Unit tests skipped for service discovery repository"
          echo "ℹ️  This is a service discovery server - testing handled separately"

      - name: Skip integration tests for service discovery
        if: ${{ inputs.run_integration_tests }}
        run: |
          echo "� Integration tests skipped for service discovery repository"

      - name: Coverage analysis (skipped)
        id: coverage
        run: |
          echo "percentage=0" >> $GITHUB_OUTPUT
          echo "🚫 Coverage analysis skipped for service discovery repository"
          echo "==============================================="
          echo "🎯 CODE COVERAGE ANALYSIS - SKIPPED"
          echo "==============================================="
          echo "📊 Coverage: N/A (Service Discovery Server)"
          echo "==============================================="

      - name: Test summary (skipped)
        id: test-summary
        run: |
          # Set coverage percentage as 0 since tests are skipped
          COVERAGE_PERCENT="0"
          THRESHOLD=${{ inputs.coverage_threshold }}

          # Create prominent summary header
          echo "## 🧪 Quality Tests Summary (Service Discovery)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage section
          echo "### 📊 Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "🚫 **Tests Skipped** (Service Discovery Server)" >> $GITHUB_STEP_SUMMARY
          echo "> Service discovery servers typically don't require extensive unit testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test results section
          echo "test_results=skipped" >> $GITHUB_OUTPUT
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "🚫 **Tests Skipped for Service Discovery Repository**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ℹ️ Why Tests Are Skipped" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Discovery**: This is a Netflix Eureka server" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration-focused**: Primarily configuration-driven application" >> $GITHUB_STEP_SUMMARY
          echo "- **Testing Strategy**: Integration and E2E tests are more valuable" >> $GITHUB_STEP_SUMMARY

      - name: Upload test artifacts (skipped)
        if: always()
        run: |
          echo "🚫 Test artifacts upload skipped - no tests run for service discovery"

      - name: Publish test results (skipped)
        if: always()
        run: |
          echo "🚫 Test results publishing skipped - no tests run for service discovery"
